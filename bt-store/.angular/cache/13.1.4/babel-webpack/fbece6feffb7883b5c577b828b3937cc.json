{"ast":null,"code":"import _asyncToGenerator from \"c:\\\\Dev\\\\blackthread-ng\\\\bt-store\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Observable, throwError } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, query } from \"firebase/firestore\";\nimport { addDoc, onSnapshot } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nexport class ProductService {\n  constructor() {\n    this.productUrl = 'api/products/products.json';\n    this.fsApp = initializeApp(environment.firebase);\n    this.fs = getFirestore(this.fsApp);\n    this.errorMessage = '';\n    this.productData = [];\n    this.allProducts = new Observable(observer => {\n      const q = query(collection(this.fs, \"bt-products\"));\n      onSnapshot(q, snapshot => {\n        let products = [];\n        snapshot.docs.forEach(doc => {\n          products.push(Object.assign(Object.assign({}, doc.data()), {\n            id: doc.id\n          }));\n        });\n        this.productData = products;\n        observer.next(this.productData);\n      });\n    }); // subscribe to firestore collection\n  }\n\n  addProduct(formEntryDataIn) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // console.log(formEntryData);\n      let msg = \"Error adding document: \";\n\n      try {\n        // cleanup data\n        const formEntryData = {};\n        Object.assign(formEntryData, formEntryDataIn);\n\n        _this.castValuesToProperType(formEntryData); // send data to firestore\n\n\n        const docRef = yield addDoc(collection(_this.fs, \"bt-products\"), formEntryData); // this.getProductsAll;\n\n        msg = \"Document written with ID: \", docRef;\n      } catch (e) {\n        msg += e;\n      }\n\n      return msg;\n    })();\n  } // Cast values to correct type based on formData\n\n\n  castValuesToProperType(o) {\n    var _a;\n\n    if (o) {\n      for (let [key, value] of Object.entries(o)) {\n        let controls = this.formData.controls;\n        let controlType = (_a = controls.find(obj => obj.name === key)) === null || _a === void 0 ? void 0 : _a.type;\n\n        if (controlType === 'number' && value != '') {\n          o[key] = parseFloat(o[key]);\n        }\n      }\n    }\n  }\n\n  handleError(err) {\n    //log the error\n    let errorMessage = '';\n\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred\n      errorMessage = `An error occurred: ${err.error.message}`;\n    }\n\n    console.log(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)();\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["c:/Dev/blackthread-ng/bt-store/src/app/products/product.service.ts"],"names":["Observable","throwError","environment","initializeApp","getFirestore","collection","query","addDoc","onSnapshot","i0","ProductService","constructor","productUrl","fsApp","firebase","fs","errorMessage","productData","allProducts","observer","q","snapshot","products","docs","forEach","doc","push","Object","assign","data","id","next","addProduct","formEntryDataIn","msg","formEntryData","castValuesToProperType","docRef","e","o","_a","key","value","entries","controls","formData","controlType","find","obj","name","type","parseFloat","handleError","err","error","ErrorEvent","message","console","log","Error","ɵfac","ProductService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Observable, throwError } from \"rxjs\";\r\nimport { environment } from 'src/environments/environment';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, collection, query } from \"firebase/firestore\";\r\nimport { addDoc, onSnapshot } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nexport class ProductService {\r\n    constructor() {\r\n        this.productUrl = 'api/products/products.json';\r\n        this.fsApp = initializeApp(environment.firebase);\r\n        this.fs = getFirestore(this.fsApp);\r\n        this.errorMessage = '';\r\n        this.productData = [];\r\n        this.allProducts = new Observable((observer) => {\r\n            const q = query(collection(this.fs, \"bt-products\"));\r\n            onSnapshot(q, (snapshot) => {\r\n                let products = [];\r\n                snapshot.docs.forEach((doc) => {\r\n                    products.push(Object.assign(Object.assign({}, doc.data()), { id: doc.id }));\r\n                });\r\n                this.productData = products;\r\n                observer.next(this.productData);\r\n            });\r\n        });\r\n        // subscribe to firestore collection\r\n    }\r\n    async addProduct(formEntryDataIn) {\r\n        // console.log(formEntryData);\r\n        let msg = \"Error adding document: \";\r\n        try {\r\n            // cleanup data\r\n            const formEntryData = {};\r\n            Object.assign(formEntryData, formEntryDataIn);\r\n            this.castValuesToProperType(formEntryData);\r\n            // send data to firestore\r\n            const docRef = await addDoc(collection(this.fs, \"bt-products\"), formEntryData);\r\n            // this.getProductsAll;\r\n            msg = \"Document written with ID: \", docRef;\r\n        }\r\n        catch (e) {\r\n            msg += e;\r\n        }\r\n        return msg;\r\n    }\r\n    // Cast values to correct type based on formData\r\n    castValuesToProperType(o) {\r\n        var _a;\r\n        if (o) {\r\n            for (let [key, value] of Object.entries(o)) {\r\n                let controls = this.formData.controls;\r\n                let controlType = (_a = controls.find(obj => obj.name === key)) === null || _a === void 0 ? void 0 : _a.type;\r\n                if (controlType === 'number' && value != '') {\r\n                    o[key] = parseFloat(o[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleError(err) {\r\n        //log the error\r\n        let errorMessage = '';\r\n        if (err.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        }\r\n        console.log(errorMessage);\r\n        return throwError(() => new Error(errorMessage));\r\n    }\r\n}\r\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(); };\r\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}