{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Dev\\\\blackthread-ng\\\\bt-store\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { tap, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productUrl = 'api/products/products.json';\n    this.fsApp = initializeApp(environment.firebase);\n    this.fs = getFirestore(this.fsApp);\n    this.newDoc = {\n      productId: 100,\n      productName: \"testItem2\",\n      productCode: \"123-123\",\n      releaseDate: \"2022-02-20\",\n      description: \"this a test 2\",\n      price: 1234,\n      starRating: 1.0,\n      imageUrl: \"\"\n    };\n  }\n\n  getProducts() {\n    return this.http.get(this.productUrl).pipe(tap(data => console.log('All', JSON.stringify(data))), catchError(this.handleError));\n  }\n\n  addProduct(product) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const docRef = yield addDoc(collection(_this.fs, \"bt-products\"), _this.newDoc);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (e) {\n        console.error(\"Error adding document: \", e);\n      }\n    })();\n  }\n\n  handleError(err) {\n    //log the error\n    let errorMessage = '';\n\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred\n      errorMessage = `An error occurred: ${err.error.message}`;\n    }\n\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Dev/blackthread-ng/bt-store/src/app/products/product.service.ts"],"names":["tap","throwError","catchError","environment","initializeApp","getFirestore","collection","addDoc","i0","i1","ProductService","constructor","http","productUrl","fsApp","firebase","fs","newDoc","productId","productName","productCode","releaseDate","description","price","starRating","imageUrl","getProducts","get","pipe","data","console","log","JSON","stringify","handleError","addProduct","product","docRef","id","e","error","err","errorMessage","ErrorEvent","message","ɵfac","ProductService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,MAAhC;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,oBAAnC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkB,4BAAlB;AACA,SAAKC,KAAL,GAAaV,aAAa,CAACD,WAAW,CAACY,QAAb,CAA1B;AACA,SAAKC,EAAL,GAAUX,YAAY,CAAC,KAAKS,KAAN,CAAtB;AACA,SAAKG,MAAL,GAAc;AACVC,MAAAA,SAAS,EAAE,GADD;AAEVC,MAAAA,WAAW,EAAE,WAFH;AAGVC,MAAAA,WAAW,EAAE,SAHH;AAIVC,MAAAA,WAAW,EAAE,YAJH;AAKVC,MAAAA,WAAW,EAAE,eALH;AAMVC,MAAAA,KAAK,EAAE,IANG;AAOVC,MAAAA,UAAU,EAAE,GAPF;AAQVC,MAAAA,QAAQ,EAAE;AARA,KAAd;AAUH;;AACDC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKd,IAAL,CAAUe,GAAV,CAAc,KAAKd,UAAnB,EAA+Be,IAA/B,CAAoC5B,GAAG,CAAC6B,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAnB,CAAT,CAAvC,EAA2F3B,UAAU,CAAC,KAAKgC,WAAN,CAArG,CAAP;AACH;;AACKC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAAA;;AAAA;AACtB,UAAI;AACA,cAAMC,MAAM,SAAS9B,MAAM,CAACD,UAAU,CAAC,KAAI,CAACU,EAAN,EAAU,aAAV,CAAX,EAAqC,KAAI,CAACC,MAA1C,CAA3B;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CM,MAAM,CAACC,EAAjD;AACH,OAHD,CAIA,OAAOC,CAAP,EAAU;AACNT,QAAAA,OAAO,CAACU,KAAR,CAAc,yBAAd,EAAyCD,CAAzC;AACH;AAPqB;AAQzB;;AACDL,EAAAA,WAAW,CAACO,GAAD,EAAM;AACb;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA,QAAID,GAAG,CAACD,KAAJ,YAAqBG,UAAzB,EAAqC;AACjC;AACAD,MAAAA,YAAY,GAAI,sBAAqBD,GAAG,CAACD,KAAJ,CAAUI,OAAQ,EAAvD;AACH;;AACDd,IAAAA,OAAO,CAACC,GAAR,CAAYW,YAAZ;AACA,WAAOzC,UAAU,CAACyC,YAAD,CAAjB;AACH;;AAtCuB;;AAwC5BhC,cAAc,CAACmC,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAIrC,cAAV,EAA0BF,EAAE,CAACwC,QAAH,CAAYvC,EAAE,CAACwC,UAAf,CAA1B,CAAP;AAA+D,CAA1H;;AACAvC,cAAc,CAACwC,KAAf,GAAuB,aAAc1C,EAAE,CAAC2C,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE1C,cAAT;AAAyB2C,EAAAA,OAAO,EAAE3C,cAAc,CAACmC,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { tap, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs\";\r\nimport { environment } from 'src/environments/environment';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ProductService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.productUrl = 'api/products/products.json';\r\n        this.fsApp = initializeApp(environment.firebase);\r\n        this.fs = getFirestore(this.fsApp);\r\n        this.newDoc = {\r\n            productId: 100,\r\n            productName: \"testItem2\",\r\n            productCode: \"123-123\",\r\n            releaseDate: \"2022-02-20\",\r\n            description: \"this a test 2\",\r\n            price: 1234,\r\n            starRating: 1.0,\r\n            imageUrl: \"\"\r\n        };\r\n    }\r\n    getProducts() {\r\n        return this.http.get(this.productUrl).pipe(tap(data => console.log('All', JSON.stringify(data))), catchError(this.handleError));\r\n    }\r\n    async addProduct(product) {\r\n        try {\r\n            const docRef = await addDoc(collection(this.fs, \"bt-products\"), this.newDoc);\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n        }\r\n        catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n        }\r\n    }\r\n    handleError(err) {\r\n        //log the error\r\n        let errorMessage = '';\r\n        if (err.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        }\r\n        console.log(errorMessage);\r\n        return throwError(errorMessage);\r\n    }\r\n}\r\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient)); };\r\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}