{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Dev\\\\blackthread-ng\\\\bt-store\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { throwError } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productUrl = 'api/products/products.json';\n    this.fsApp = initializeApp(environment.firebase);\n    this.fs = getFirestore(this.fsApp);\n    this.errorMessage = '';\n  }\n\n  getProducts() {\n    return this.http.get(this.productUrl);\n  } // use pipe to console log the data\n  // getProducts(): Observable<IProduct[]> {\n  //     return this.http.get<IProduct[]>(this.productUrl)\n  //         .pipe(tap(data => console.log('All', JSON.stringify(data))),\n  //         catchError(this.handleError)\n  //     );\n  // }\n\n\n  getFormData() {\n    return this.http.get('/assets/product-form.json');\n  }\n\n  retrieveFormData() {\n    this.formDataSub = this.getFormData().subscribe({\n      next: data => {\n        this.formData = data;\n      },\n      error: err => this.errorMessage = err\n    });\n  }\n\n  addProduct(formEntryData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        // cleanup data\n        const formEntryDataClean = {};\n        Object.assign(formEntryDataClean, formEntryData);\n\n        _this.castValuesToProperType(formEntryDataClean); // send data to firestore\n\n\n        const docRef = yield addDoc(collection(_this.fs, \"bt-products\"), formEntryDataClean);\n        console.log(\"Document written with ID: \", docRef.id);\n      } catch (e) {\n        console.error(\"Error adding document: \", e);\n      }\n    })();\n  } // TODO: read in json file to find correct type for casting\n\n\n  castValuesToProperType(o) {\n    // const formData = this.http.get<FormData>('/assets/product-form.json');\n    // console.log('from castValuesToProperType: {0}', formData);\n    if (o) {\n      for (let [key, value] of Object.entries(o)) {\n        let formData = this.getFormData();\n        let controlObject = formData.find(obj => obj.productName); // let controls[] = formData.controls;\n      }\n    }\n  }\n\n  handleError(err) {\n    //log the error\n    let errorMessage = '';\n\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred\n      errorMessage = `An error occurred: ${err.error.message}`;\n    }\n\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Dev/blackthread-ng/bt-store/src/app/products/product.service.ts"],"names":["throwError","environment","initializeApp","getFirestore","collection","addDoc","i0","i1","ProductService","constructor","http","productUrl","fsApp","firebase","fs","errorMessage","getProducts","get","getFormData","retrieveFormData","formDataSub","subscribe","next","data","formData","error","err","addProduct","formEntryData","formEntryDataClean","Object","assign","castValuesToProperType","docRef","console","log","id","e","o","key","value","entries","controlObject","find","obj","productName","handleError","ErrorEvent","message","ɵfac","ProductService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { throwError } from \"rxjs\";\r\nimport { environment } from 'src/environments/environment';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ProductService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.productUrl = 'api/products/products.json';\r\n        this.fsApp = initializeApp(environment.firebase);\r\n        this.fs = getFirestore(this.fsApp);\r\n        this.errorMessage = '';\r\n    }\r\n    getProducts() {\r\n        return this.http.get(this.productUrl);\r\n    }\r\n    // use pipe to console log the data\r\n    // getProducts(): Observable<IProduct[]> {\r\n    //     return this.http.get<IProduct[]>(this.productUrl)\r\n    //         .pipe(tap(data => console.log('All', JSON.stringify(data))),\r\n    //         catchError(this.handleError)\r\n    //     );\r\n    // }\r\n    getFormData() {\r\n        return this.http.get('/assets/product-form.json');\r\n    }\r\n    retrieveFormData() {\r\n        this.formDataSub = this.getFormData().subscribe({\r\n            next: (data) => {\r\n                this.formData = data;\r\n            },\r\n            error: (err) => this.errorMessage = err\r\n        });\r\n    }\r\n    async addProduct(formEntryData) {\r\n        try {\r\n            // cleanup data\r\n            const formEntryDataClean = {};\r\n            Object.assign(formEntryDataClean, formEntryData);\r\n            this.castValuesToProperType(formEntryDataClean);\r\n            // send data to firestore\r\n            const docRef = await addDoc(collection(this.fs, \"bt-products\"), formEntryDataClean);\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n        }\r\n        catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n        }\r\n    }\r\n    // TODO: read in json file to find correct type for casting\r\n    castValuesToProperType(o) {\r\n        // const formData = this.http.get<FormData>('/assets/product-form.json');\r\n        // console.log('from castValuesToProperType: {0}', formData);\r\n        if (o) {\r\n            for (let [key, value] of Object.entries(o)) {\r\n                let formData = this.getFormData();\r\n                let controlObject = formData.find(obj => obj.productName);\r\n                // let controls[] = formData.controls;\r\n            }\r\n        }\r\n    }\r\n    handleError(err) {\r\n        //log the error\r\n        let errorMessage = '';\r\n        if (err.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        }\r\n        console.log(errorMessage);\r\n        return throwError(errorMessage);\r\n    }\r\n}\r\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient)); };\r\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}