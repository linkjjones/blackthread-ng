{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Dev\\\\blackthread-ng\\\\bt-store\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { throwError } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport { initializeApp } from \"firebase/app\";\nimport { collection, getFirestore } from \"firebase/firestore\";\nimport { getDocs, addDoc } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    var _this = this;\n\n    this.http = http;\n    this.productUrl = 'api/products/products.json';\n    this.fsApp = initializeApp(environment.firebase);\n    this.fs = getFirestore(this.fsApp);\n    this.errorMessage = '';\n    this.productData = []; // getProducts(): Observable<IProduct[]> {\n    //     return this.http.get<IProduct[]>(this.productUrl);\n    // }\n\n    this.getProductsAll = new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (resolve) {\n        const querySnapshot = yield getDocs(collection(_this.fs, \"bt-products\"));\n        querySnapshot.forEach(doc => {\n          _this.productData.push(doc.data());\n        });\n        resolve(_this.productData);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // this.formDataSub = this.getFormData().subscribe({\n    //     next: (data: any) => {\n    //         this.formData = data;\n    //     },\n    //     error: (err: any) => this.errorMessage = err\n    // });\n  } // use pipe to console log the data\n  // getProducts(): Observable<IProduct[]> {\n  //     return this.http.get<IProduct[]>(this.productUrl)\n  //         .pipe(tap(data => console.log('All', JSON.stringify(data))),\n  //         catchError(this.handleError)\n  //     );\n  // }\n\n\n  getFormData() {\n    return this.http.get('/assets/product-form.json');\n  }\n\n  addProduct(formEntryData) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let msg = \"Error adding document: \";\n\n      try {\n        // cleanup data\n        const formEntryDataClean = {};\n        Object.assign(formEntryDataClean, formEntryData);\n\n        _this2.castValuesToProperType(formEntryDataClean); // send data to firestore\n\n\n        const docRef = yield addDoc(collection(_this2.fs, \"bt-products\"), formEntryDataClean);\n        msg = \"Document written with ID: \", docRef.id;\n      } catch (e) {\n        msg += e;\n      }\n\n      console.log(msg);\n      return msg;\n    })();\n  } // Cast values to correct type based on formData\n\n\n  castValuesToProperType(o) {\n    var _a;\n\n    if (o) {\n      console.log(\"castValuesToProperType\");\n\n      for (let [key, value] of Object.entries(o)) {\n        let controls = this.formData.controls;\n        let controlType = (_a = controls.find(obj => obj.name === key)) === null || _a === void 0 ? void 0 : _a.type;\n\n        if (controlType === 'number' && value != '') {\n          o[key] = parseFloat(o[key]); // console.log(o.name + ': ' +o[key]);\n        }\n      }\n    }\n  }\n\n  handleError(err) {\n    //log the error\n    let errorMessage = '';\n\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred\n      errorMessage = `An error occurred: ${err.error.message}`;\n    }\n\n    console.log(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Dev/blackthread-ng/bt-store/src/app/products/product.service.ts"],"names":["throwError","environment","initializeApp","collection","getFirestore","getDocs","addDoc","i0","i1","ProductService","constructor","http","productUrl","fsApp","firebase","fs","errorMessage","productData","getProductsAll","Promise","resolve","querySnapshot","forEach","doc","push","data","getFormData","get","addProduct","formEntryData","msg","formEntryDataClean","Object","assign","castValuesToProperType","docRef","id","e","console","log","o","_a","key","value","entries","controls","formData","controlType","find","obj","name","type","parseFloat","handleError","err","error","ErrorEvent","message","Error","ɵfac","ProductService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { throwError } from \"rxjs\";\r\nimport { environment } from 'src/environments/environment';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { collection, getFirestore } from \"firebase/firestore\";\r\nimport { getDocs, addDoc } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ProductService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.productUrl = 'api/products/products.json';\r\n        this.fsApp = initializeApp(environment.firebase);\r\n        this.fs = getFirestore(this.fsApp);\r\n        this.errorMessage = '';\r\n        this.productData = [];\r\n        // getProducts(): Observable<IProduct[]> {\r\n        //     return this.http.get<IProduct[]>(this.productUrl);\r\n        // }\r\n        this.getProductsAll = new Promise(async (resolve) => {\r\n            const querySnapshot = await getDocs(collection(this.fs, \"bt-products\"));\r\n            querySnapshot.forEach((doc) => {\r\n                this.productData.push(doc.data());\r\n            });\r\n            resolve(this.productData);\r\n        });\r\n        // this.formDataSub = this.getFormData().subscribe({\r\n        //     next: (data: any) => {\r\n        //         this.formData = data;\r\n        //     },\r\n        //     error: (err: any) => this.errorMessage = err\r\n        // });\r\n    }\r\n    // use pipe to console log the data\r\n    // getProducts(): Observable<IProduct[]> {\r\n    //     return this.http.get<IProduct[]>(this.productUrl)\r\n    //         .pipe(tap(data => console.log('All', JSON.stringify(data))),\r\n    //         catchError(this.handleError)\r\n    //     );\r\n    // }\r\n    getFormData() {\r\n        return this.http.get('/assets/product-form.json');\r\n    }\r\n    async addProduct(formEntryData) {\r\n        let msg = \"Error adding document: \";\r\n        try {\r\n            // cleanup data\r\n            const formEntryDataClean = {};\r\n            Object.assign(formEntryDataClean, formEntryData);\r\n            this.castValuesToProperType(formEntryDataClean);\r\n            // send data to firestore\r\n            const docRef = await addDoc(collection(this.fs, \"bt-products\"), formEntryDataClean);\r\n            msg = \"Document written with ID: \", docRef.id;\r\n        }\r\n        catch (e) {\r\n            msg += e;\r\n        }\r\n        console.log(msg);\r\n        return msg;\r\n    }\r\n    // Cast values to correct type based on formData\r\n    castValuesToProperType(o) {\r\n        var _a;\r\n        if (o) {\r\n            console.log(\"castValuesToProperType\");\r\n            for (let [key, value] of Object.entries(o)) {\r\n                let controls = this.formData.controls;\r\n                let controlType = (_a = controls.find(obj => obj.name === key)) === null || _a === void 0 ? void 0 : _a.type;\r\n                if (controlType === 'number' && value != '') {\r\n                    o[key] = parseFloat(o[key]);\r\n                    // console.log(o.name + ': ' +o[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleError(err) {\r\n        //log the error\r\n        let errorMessage = '';\r\n        if (err.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        }\r\n        console.log(errorMessage);\r\n        return throwError(() => new Error(errorMessage));\r\n    }\r\n}\r\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient)); };\r\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}