{"ast":null,"code":"import _asyncToGenerator from \"c:\\\\Dev\\\\blackthread-ng\\\\bt-store\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Observable, throwError } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, query } from \"firebase/firestore\";\nimport { addDoc, onSnapshot } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productUrl = 'api/products/products.json';\n    this.fsApp = initializeApp(environment.firebase);\n    this.fs = getFirestore(this.fsApp);\n    this.errorMessage = '';\n    this.productData = [];\n    this.allProducts = new Observable(observer => {\n      const q = query(collection(this.fs, \"bt-products\"));\n      const unsub = onSnapshot(q, querySnapshot => {\n        const products = [];\n        products.forEach(product => {\n          products.push(product.data());\n        });\n        observer.next(products);\n      });\n    });\n    this.formDataSub = this.getFormData().subscribe({\n      next: data => {\n        this.formData = data;\n      },\n      error: err => this.errorMessage = err\n    }); // subscribe to firestore collection\n  }\n\n  getFormData() {\n    return this.http.get('/assets/product-form.json');\n  }\n\n  getProductsAll() {\n    const q = query(collection(this.fs, \"bt-products\"));\n    const unsub = onSnapshot(q, querySnapshot => {\n      const products = [];\n      products.forEach(product => {\n        products.push(product.data());\n      });\n      this.productData = products;\n    });\n    return new Observable(subscriber => {\n      subscriber.next(this.productData);\n    });\n  } // getProducts(): Observable<IProduct[]> {\n  //     return this.http.get<IProduct[]>(this.productUrl);\n  // }\n  // getProductsAll = new Promise(async (resolve) => {\n  //     const querySnapshot = await getDocs(collection(this.fs, \"bt-products\"));\n  //     querySnapshot.forEach((doc) => {\n  //         this.productData.push(doc.data());\n  //     });\n  //     resolve(this.productData);\n  // })\n  // use pipe to console log the data\n  // getProducts(): Observable<IProduct[]> {\n  //     return this.http.get<IProduct[]>(this.productUrl)\n  //         .pipe(tap(data => console.log('All', JSON.stringify(data))),\n  //         catchError(this.handleError)\n  //     );\n  // }\n\n\n  addProduct(formEntryData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // console.log(formEntryData);\n      let msg = \"Error adding document: \";\n\n      try {\n        // cleanup data\n        const formEntryData = {};\n        Object.assign(formEntryData, formEntryData);\n\n        _this.castValuesToProperType(formEntryData); // send data to firestore\n\n\n        const docRef = yield addDoc(collection(_this.fs, \"bt-products\"), formEntryData); // this.getProductsAll;\n\n        msg = \"Document written with ID: \", docRef;\n      } catch (e) {\n        msg += e;\n      }\n\n      return msg;\n    })();\n  } // Cast values to correct type based on formData\n\n\n  castValuesToProperType(o) {\n    var _a;\n\n    if (o) {\n      for (let [key, value] of Object.entries(o)) {\n        let controls = this.formData.controls;\n        let controlType = (_a = controls.find(obj => obj.name === key)) === null || _a === void 0 ? void 0 : _a.type;\n\n        if (controlType === 'number' && value != '') {\n          o[key] = parseFloat(o[key]);\n        }\n      }\n    }\n  }\n\n  handleError(err) {\n    //log the error\n    let errorMessage = '';\n\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred\n      errorMessage = `An error occurred: ${err.error.message}`;\n    }\n\n    console.log(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["c:/Dev/blackthread-ng/bt-store/src/app/products/product.service.ts"],"names":["Observable","throwError","environment","initializeApp","getFirestore","collection","query","addDoc","onSnapshot","i0","i1","ProductService","constructor","http","productUrl","fsApp","firebase","fs","errorMessage","productData","allProducts","observer","q","unsub","querySnapshot","products","forEach","product","push","data","next","formDataSub","getFormData","subscribe","formData","error","err","get","getProductsAll","subscriber","addProduct","formEntryData","msg","Object","assign","castValuesToProperType","docRef","e","o","_a","key","value","entries","controls","controlType","find","obj","name","type","parseFloat","handleError","ErrorEvent","message","console","log","Error","ɵfac","ProductService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Observable, throwError } from \"rxjs\";\r\nimport { environment } from 'src/environments/environment';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, collection, query } from \"firebase/firestore\";\r\nimport { addDoc, onSnapshot } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ProductService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.productUrl = 'api/products/products.json';\r\n        this.fsApp = initializeApp(environment.firebase);\r\n        this.fs = getFirestore(this.fsApp);\r\n        this.errorMessage = '';\r\n        this.productData = [];\r\n        this.allProducts = new Observable((observer) => {\r\n            const q = query(collection(this.fs, \"bt-products\"));\r\n            const unsub = onSnapshot(q, (querySnapshot) => {\r\n                const products = [];\r\n                products.forEach((product) => {\r\n                    products.push(product.data());\r\n                });\r\n                observer.next(products);\r\n            });\r\n        });\r\n        this.formDataSub = this.getFormData().subscribe({\r\n            next: (data) => {\r\n                this.formData = data;\r\n            },\r\n            error: (err) => this.errorMessage = err\r\n        });\r\n        // subscribe to firestore collection\r\n    }\r\n    getFormData() {\r\n        return this.http.get('/assets/product-form.json');\r\n    }\r\n    getProductsAll() {\r\n        const q = query(collection(this.fs, \"bt-products\"));\r\n        const unsub = onSnapshot(q, (querySnapshot) => {\r\n            const products = [];\r\n            products.forEach((product) => {\r\n                products.push(product.data());\r\n            });\r\n            this.productData = products;\r\n        });\r\n        return new Observable(subscriber => {\r\n            subscriber.next(this.productData);\r\n        });\r\n    }\r\n    // getProducts(): Observable<IProduct[]> {\r\n    //     return this.http.get<IProduct[]>(this.productUrl);\r\n    // }\r\n    // getProductsAll = new Promise(async (resolve) => {\r\n    //     const querySnapshot = await getDocs(collection(this.fs, \"bt-products\"));\r\n    //     querySnapshot.forEach((doc) => {\r\n    //         this.productData.push(doc.data());\r\n    //     });\r\n    //     resolve(this.productData);\r\n    // })\r\n    // use pipe to console log the data\r\n    // getProducts(): Observable<IProduct[]> {\r\n    //     return this.http.get<IProduct[]>(this.productUrl)\r\n    //         .pipe(tap(data => console.log('All', JSON.stringify(data))),\r\n    //         catchError(this.handleError)\r\n    //     );\r\n    // }\r\n    async addProduct(formEntryData) {\r\n        // console.log(formEntryData);\r\n        let msg = \"Error adding document: \";\r\n        try {\r\n            // cleanup data\r\n            const formEntryData = {};\r\n            Object.assign(formEntryData, formEntryData);\r\n            this.castValuesToProperType(formEntryData);\r\n            // send data to firestore\r\n            const docRef = await addDoc(collection(this.fs, \"bt-products\"), formEntryData);\r\n            // this.getProductsAll;\r\n            msg = \"Document written with ID: \", docRef;\r\n        }\r\n        catch (e) {\r\n            msg += e;\r\n        }\r\n        return msg;\r\n    }\r\n    // Cast values to correct type based on formData\r\n    castValuesToProperType(o) {\r\n        var _a;\r\n        if (o) {\r\n            for (let [key, value] of Object.entries(o)) {\r\n                let controls = this.formData.controls;\r\n                let controlType = (_a = controls.find(obj => obj.name === key)) === null || _a === void 0 ? void 0 : _a.type;\r\n                if (controlType === 'number' && value != '') {\r\n                    o[key] = parseFloat(o[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleError(err) {\r\n        //log the error\r\n        let errorMessage = '';\r\n        if (err.error instanceof ErrorEvent) {\r\n            // A client-side or network error occurred\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        }\r\n        console.log(errorMessage);\r\n        return throwError(() => new Error(errorMessage));\r\n    }\r\n}\r\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient)); };\r\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}